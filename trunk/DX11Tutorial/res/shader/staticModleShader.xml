<Shader>
	<PSShader>
		<CBuffer>
			LightData
		</CBuffer>
		<SamplerState>
			
		</SamplerState>
		<Texture>
			diffuse
		</Texture>
		<ShaderCode>
			<![CDATA[
/*
* File color.ps for sample bufferandshader;
*/

cbuffer LightData
{
	float4 lightColor;
	float4 lightpostion;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
};

Texture2D shaderTexture;
SamplerState SampleType;

float4 main(PixelInputType input) : SV_TARGET
{
	  float3 L = lightpostion.xyz - input.position.xyz;
	  L = normalize(L);
	  float3 N = float3(0.0,0.0,1.0);
	  float det = max(dot(L,N),0);
	  
	  float4 textureColor = shaderTexture.Sample(SampleType, input.color.xy);;
    return (textureColor + lightColor*det );
}
]]>
		</ShaderCode>
	</PSShader>
	<VSShader>
		
		<CBuffer>
			WorldViewProject
		</CBuffer>
		
		<InputType>
			<Element name="POSITION" value="FLOAT3"/>
			<Element name="COLOR" value="FLOAT4"/>
		</InputType>
		<ShaderCode>
			<![CDATA[
/*
* File color.vs for sample bufferandshader;
*/

cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

cbuffer LightConst
{
	float4 LightColor;
};


//Input Type and OutPutType

struct VertexInputType
{
	float4 position:POSITION;
	float4 color:COLOR;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
};

PixelInputType main(VertexInputType input)
{
	PixelInputType output;
	
	input.position.w = 1.0;//input position is float3
	
	output.position = mul(input.position, worldMatrix);//translate world
	
	output.position = mul(output.position, viewMatrix);//translate view
	
	output.position = mul(output.position, projectionMatrix);//translate projection
	
	//output.position = input.position;
	output.color = input.color;
	
	return output;
}]]>
		</ShaderCode>
	</VSShader>
</Shader>
