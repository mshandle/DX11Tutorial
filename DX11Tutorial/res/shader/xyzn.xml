<Shader>
	<PSShader>
		<CBuffer>
			TerrainLightData
		</CBuffer>
		<SamplerState>
	
		</SamplerState>
		<ShaderCode>
			<![CDATA[
/*
* File color.ps for sample bufferandshader;
*/
SamplerState SampleType;

cbuffer TerrainLightData
{
	 float4 ambientColor;
   float4 diffuseColor;
   float3 lightDirection;
   float 	padding;
};

struct PixelInputType
{
    float4 position : POSITION;
    float3 normal : NORMAL;
};
float4 main(PixelInputType input) : SV_TARGET
{
	 	float3 lightDir;
    float lightIntensity;
    float4 color;


    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }

    // Saturate the final light color.
    color = saturate(color);

    return color;
}
]]>
		</ShaderCode>
	</PSShader>
	<VSShader>
		
		<CBuffer>
			WorldViewProject
		</CBuffer>
		
		<InputType>
			<Element name="POSITION" value="FLOAT3"/>
			<Element name="NORMAL" value="FLOAT3"/>
		</InputType>
		<ShaderCode>
			<![CDATA[
/*
* File color.vs for sample bufferandshader;
*/

cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

cbuffer LightConst
{
	float4 LightColor;
};


//Input Type and OutPutType

struct VertexInputType
{
	  float3 position : POSITION;
    float3 normal : NORMAL;
};

struct PixelInputType
{
 	  float4 position : SV_POSITION;
    float3 normal : NORMAL;
};

PixelInputType main(VertexInputType input)
{
	PixelInputType output;
	
	output.position = mul(float4(input.position,1.0), worldMatrix);//translate world
	output.position = mul(output.position, viewMatrix);//translate view
	output.position = mul(output.position, projectionMatrix);//translate projection
	
	// Calculate the normal vector against the world matrix only.
   output.normal = mul(input.normal, (float3x3)worldMatrix);
	
  // Normalize the normal vector.
  output.normal = normalize(output.normal);
  return output;
}]]>
		</ShaderCode>
	</VSShader>
</Shader>
