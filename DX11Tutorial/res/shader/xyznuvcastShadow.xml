<Shader>
	<PSShader>
		<CBuffer>
			LightData
		</CBuffer>
		<SamplerState>
			
		</SamplerState>
		<Texture>
			diffuse
		</Texture>
		<ShaderCode>
			<![CDATA[
/*
* File color.ps for sample bufferandshader;
*/

cbuffer LightData
{
	float4 lightColor;
	float4 lightpostion;
};

struct PixelInputType
{
     float4 position : SV_POSITION;
    float4 wposition : position;
    float4 pposition : position1;
    float3 normal:normal;
    float4 shadowUV:position12;
};

Texture2D shaderTexture;
SamplerState SampleType;

float4 main(PixelInputType input) : SV_TARGET
{
		input.shadowUV.xy = input.shadowUV.xy/input.shadowUV.w * 0.5 + float2(0.5,0.5);
		input.shadowUV.y =  1.0 - input.shadowUV.y;
		
		float lightdistance = (input.shadowUV.z - 0.1)/(3000 - 0.1) - 0.0001;
		
		float pixoff = 0.001;
		
		float depth = shaderTexture.Sample(SampleType,input.shadowUV.xy).x;//get depth from depth texture range[0,1]; tranlate to [0.1 5000]
		float roundDepth1 = shaderTexture.Sample(SampleType,input.shadowUV.xy + float2(-pixoff,0));
		float roundDepth2 = shaderTexture.Sample(SampleType,input.shadowUV.xy + float2(pixoff,0));
		float roundDepth3 = shaderTexture.Sample(SampleType,input.shadowUV.xy + float2(0,pixoff));
		float roundDepth4 = shaderTexture.Sample(SampleType,input.shadowUV.xy + float2(0,-pixoff));
		
		float justVaule = depth>= lightdistance?1:0;
		justVaule += roundDepth1>= lightdistance?1:0;
		justVaule += roundDepth2>= lightdistance?1:0;
		justVaule += roundDepth3>= lightdistance?1:0;
		justVaule += roundDepth4>= lightdistance?1:0;
		
		justVaule *=0.2;
	//	return float4(justVaule,justVaule,justVaule,1);

		float3 eyePosition = float3(0,-20,299);
	  float3 L =input.wposition- lightpostion.xyz;
	  float3 V = input.wposition - eyePosition ;
	 	V = normalize(V);
	 	L = normalize(L);
	 	float3 N = input.normal;
	 	N = normalize(N);
	 	float det = saturate(dot(N,L));
		float3 R = reflect(N,L);
	  R = normalize(R);
	  float4 ambi = float4(0.21f,0.35f,1.0f,1.0f);
		return  (ambi *0.2 +  justVaule* lightColor * 0.3  + 0.5f *float4(1.0,1.0,1.0,1.0)* pow(max(dot(V,R),0),10.0f));
	

}
]]>
		</ShaderCode>
	</PSShader>
	<VSShader>
		
		<CBuffer>
			WorldViewProject
		</CBuffer>
		
		<InputType>
			<Element name="POSITION" value="FLOAT3"/>
			<Element name="normal" value="FLOAT3"/>
			<Element name="texcood" value="FLOAT2"/>
		</InputType>
		<ShaderCode>
			<![CDATA[
/*
* File color.vs for sample bufferandshader;
*/

cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
	matrix lightView;
};

//Input Type and OutPutType

struct VertexInputType
{
	float3 position:POSITION;
	float3 normal:normal;
	float2 texcood:texcood;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 wposition : position;
    float4 pposition : position1;
    float3 normal:normal;
    float4 shadowUV:position12;
};

PixelInputType main(VertexInputType input)
{
	PixelInputType output;
	output.position = mul(float4(input.position, 1.0f), worldMatrix);//translate world
	output.wposition = output.position;//world postion
	output.position = mul(output.position, viewMatrix);//translate view
	output.position = mul(output.position, projectionMatrix);//translate projection
	output.pposition =output.position;
	output.shadowUV	= mul(float4(input.position, 1.0f), worldMatrix);
	output.shadowUV = mul(output.shadowUV,lightView);
	output.shadowUV = mul(output.shadowUV,projectionMatrix);
	
	output.normal = mul(float4(input.normal,1.0),worldMatrix);
	return output;
}]]>
		</ShaderCode>
	</VSShader>
</Shader>
